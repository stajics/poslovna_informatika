// Type definitions for ag-grid v4.0.0
// Project: http://www.ag-grid.com/
// Definitions by: Niall Crosby <https://github.com/ceolter/>
// Definitions: https://github.com/borisyankov/DefinitelyTyped
import { ColumnGroup } from "../entities/columnGroup";
import { Column } from "../entities/column";
import { ColDef } from "../entities/colDef";
import { ColumnGroupChild } from "../entities/columnGroupChild";
import { OriginalColumnGroupChild } from "../entities/originalColumnGroupChild";
import { LoggerFactory } from "../logger";
import { AbstractColDef } from "../entities/colDef";
export declare class ColumnApi {
    private _columnController;
    sizeColumnsToFit(gridWidth: any): void;
    setColumnGroupOpened(group: ColumnGroup | string, newValue: boolean, instanceId?: number): void;
    getColumnGroup(name: string, instanceId?: number): ColumnGroup;
    getDisplayNameForCol(column: any): string;
    getColumn(key: any): Column;
    setColumnState(columnState: any): void;
    getColumnState(): [any];
    resetColumnState(): void;
    isPinning(): boolean;
    isPinningLeft(): boolean;
    isPinningRight(): boolean;
    getDisplayedColAfter(col: Column): Column;
    getDisplayedColBefore(col: Column): Column;
    setColumnVisible(key: Column | ColDef | String, visible: boolean): void;
    setColumnsVisible(keys: (Column | ColDef | String)[], visible: boolean): void;
    setColumnPinned(key: Column | ColDef | String, pinned: string): void;
    setColumnsPinned(keys: (Column | ColDef | String)[], pinned: string): void;
    getAllColumns(): Column[];
    getDisplayedLeftColumns(): Column[];
    getDisplayedCenterColumns(): Column[];
    getDisplayedRightColumns(): Column[];
    getAllDisplayedColumns(): Column[];
    getRowGroupColumns(): Column[];
    getValueColumns(): Column[];
    moveColumn(fromIndex: number, toIndex: number): void;
    moveRowGroupColumn(fromIndex: number, toIndex: number): void;
    setColumnAggFunction(column: Column, aggFunc: string): void;
    setColumnWidth(key: Column | string | ColDef, newWidth: number, finished?: boolean): void;
    removeValueColumn(column: Column): void;
    addValueColumn(column: Column): void;
    removeRowGroupColumn(column: Column): void;
    addRowGroupColumn(column: Column): void;
    getLeftDisplayedColumnGroups(): ColumnGroupChild[];
    getCenterDisplayedColumnGroups(): ColumnGroupChild[];
    getRightDisplayedColumnGroups(): ColumnGroupChild[];
    getAllDisplayedColumnGroups(): ColumnGroupChild[];
    autoSizeColumn(key: Column | ColDef | String): void;
    autoSizeColumns(keys: (Column | ColDef | String)[]): void;
    columnGroupOpened(group: ColumnGroup | string, newValue: boolean): void;
    hideColumns(colIds: any, hide: any): void;
    hideColumn(colId: any, hide: any): void;
    setState(columnState: any): void;
    getState(): [any];
    resetState(): void;
}
export declare class ColumnController {
    private gridOptionsWrapper;
    private selectionRendererFactory;
    private expressionService;
    private balancedColumnTreeBuilder;
    private displayedGroupCreator;
    private autoWidthCalculator;
    private valueColumns;
    private eventService;
    private columnUtils;
    private gridPanel;
    private context;
    private originalBalancedTree;
    private allColumns;
    private displayedLeftColumnTree;
    private displayedRightColumnTree;
    private displayedCentreColumnTree;
    private displayedLeftColumns;
    private displayedRightColumns;
    private displayedCenterColumns;
    private headerRowCount;
    private rowGroupColumns;
    private groupAutoColumn;
    private groupAutoColumnActive;
    private valueService;
    private ready;
    private logger;
    init(): void;
    agWire(loggerFactory: LoggerFactory): void;
    private setFirstRightAndLastLeftPinned();
    autoSizeColumns(keys: (Column | ColDef | String)[]): void;
    autoSizeColumn(key: Column | String | ColDef): void;
    autoSizeAllColumns(): void;
    private getColumnsFromTree(rootColumns);
    getAllDisplayedColumnGroups(): ColumnGroupChild[];
    getOriginalColumnTree(): OriginalColumnGroupChild[];
    getHeaderRowCount(): number;
    getLeftDisplayedColumnGroups(): ColumnGroupChild[];
    getRightDisplayedColumnGroups(): ColumnGroupChild[];
    getCenterDisplayedColumnGroups(): ColumnGroupChild[];
    getDisplayedColumnGroups(type: string): ColumnGroupChild[];
    isColumnDisplayed(column: Column): boolean;
    getAllDisplayedColumns(): Column[];
    getPinnedLeftContainerWidth(): number;
    getPinnedRightContainerWidth(): number;
    addRowGroupColumn(column: Column): void;
    removeRowGroupColumn(column: Column): void;
    addValueColumn(column: Column): void;
    removeValueColumn(column: Column): void;
    private normaliseColumnWidth(column, newWidth);
    setColumnWidth(key: Column | string | ColDef, newWidth: number, finished: boolean): void;
    setColumnAggFunction(column: Column, aggFunc: string): void;
    moveRowGroupColumn(fromIndex: number, toIndex: number): void;
    getPathForColumn(column: Column): ColumnGroup[];
    moveColumns(keys: (Column | ColDef | String)[], toIndex: number): void;
    moveColumn(key: string | Column | ColDef, toIndex: number): void;
    moveColumnByIndex(fromIndex: number, toIndex: number): void;
    getBodyContainerWidth(): number;
    getValueColumns(): Column[];
    getRowGroupColumns(): Column[];
    isColumnRowGrouped(column: Column): boolean;
    getDisplayedCenterColumns(): Column[];
    getDisplayedLeftColumns(): Column[];
    getDisplayedRightColumns(): Column[];
    getDisplayedColumns(type: string): Column[];
    getAllColumns(): Column[];
    isEmpty(): boolean;
    isRowGroupEmpty(): boolean;
    setColumnVisible(key: Column | ColDef | String, visible: boolean): void;
    setColumnsVisible(keys: (Column | ColDef | String)[], visible: boolean): void;
    setColumnPinned(key: Column | ColDef | String, pinned: string | boolean): void;
    setColumnsPinned(keys: (Column | ColDef | String)[], pinned: string | boolean): void;
    private actionOnColumns(keys, action, createEvent);
    getDisplayedColBefore(col: any): Column;
    getDisplayedColAfter(col: Column): Column;
    isPinningLeft(): boolean;
    isPinningRight(): boolean;
    getAllColumnsIncludingAuto(): Column[];
    getColumnState(): [any];
    resetColumnState(): void;
    setColumnState(columnState: any[]): void;
    getColumns(keys: any[]): Column[];
    getColumnWithValidation(key: string | ColDef | Column): Column;
    getColumn(key: string | ColDef | Column): Column;
    getDisplayNameForCol(column: any): string;
    getColumnGroup(colId: string | ColumnGroup, instanceId?: number): ColumnGroup;
    getColumnDept(): number;
    setColumnDefs(columnDefs: AbstractColDef[]): void;
    isReady(): boolean;
    private extractRowGroupColumns();
    setColumnGroupOpened(passedGroup: ColumnGroup | string, newValue: boolean, instanceId?: number): void;
    private getColumnGroupState();
    private setColumnGroupState(groupState);
    private updateModel();
    private updateGroupsAndDisplayedColumns();
    private updateDisplayedColumnsFromGroups();
    private setLeftValues();
    private addToDisplayedColumns(displayedColumnTree, displayedColumns);
    sizeColumnsToFit(gridWidth: any): void;
    private buildAllGroups(visibleColumns);
    private updateGroups();
    private createGroupAutoColumn();
    private updateVisibleColumns();
    private createValueColumns();
    private getWithOfColsInList(columnList);
}
